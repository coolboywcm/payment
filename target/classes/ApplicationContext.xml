<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">  
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.payment" />  
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />  
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath*:com/*/*.xml"></property>  
    </bean>  
    
     <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean> 
	
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.payment.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
  
  	<bean id="sqlRepo" class="com.payment.frame.dynasql.SqlRepo">
		<property name="mapperLocations" >
			<list>
			</list>
		</property>
		<property name="keyStrategies">
			<array value-type="com.payment.frame.dynasql.KeyStrategy">
				<value>CAMEL</value>
			</array>
		</property>
		<property name="jdbc" ref="queryJdbcTemplate"/>
		<!-- <property name="dictRepo" ref="dictRepo"/> -->		
	</bean>
	<!-- <bean id="dictRepo" class="com.payment.bases.impl.DictRepoImpl">
	</bean> -->

	<bean id="queryJdbcTemplate" class="com.payment.frame.dynasql.NamedParamQueryImpl">
		<property name="jdbcTemplate">
			<bean
							class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
				<constructor-arg>
					<bean class="org.springframework.jdbc.core.JdbcTemplate"
					      p:dataSource-ref="dataSource"/>
				</constructor-arg>
			</bean>
		</property>
	</bean>
			
	<!-- ================ Shiro start ================ -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="ShiroRealm" />
		</bean>
		
		<!-- 項目自定义的Realm -->
	    <bean id="ShiroRealm" class="com.payment.interceptor.shiro.ShiroRealm" ></bean>
		
		<!-- Shiro Filter -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />
			
			<property name="loginUrl" value="/" />
			
			<property name="successUrl" value="/main/index" />
			
			<property name="unauthorizedUrl" value="/login/index" />
			
			<property name="filterChainDefinitions">
				<value>
				/static/login/** 			= anon
				/static/js/myjs/** 			= authc
				/static/js/** 				= anon
				/uploadFiles/uploadImgs/** 	= anon
	           	/code 					= anon
	           	/login/* 			= anon
	           	/app**/** 					= anon
	           	/weixin/** 					= anon
	           	/uploadFiles/** 					= anon
	           	/**							= authc
				</value>
			</property>
		</bean>
	<!-- ================ Shiro end ================ -->
</beans>  